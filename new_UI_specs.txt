# comments with hash are instructions for AI on how to build this UI.
# AI may rewrite UI text to fix typos or unclear wording, but must keep the original design intent.
=============================================
=== Open Identity Synchronization Utility ===
===            OpenIDSync.org              ===
=============================================

Creative spark and spec-driven development by: Attila Macskasy
Code generated using: GPT-5 Codex (Preview) – Premium Model x1

Source Directory: Azure Entra ID (Microsoft)
Target Directory: Windows Active Directory (Microsoft)

Base configuration loaded from file: [00_OpenIDSync_Config.json]  # white background, black text

	DomainPromotionConfig:
		DomainName:	macskasy.com
		NetBIOSName:	MACSKASY

	UserSyncConfig:
		DefaultOU:	CN=Users,DC=macskasy,DC=com
		SkipUserBasedOnDisplayName:
			(Archive)
			(Temp)
		SkipUserBasedOnUserPrincipalName:
			#EXT#
			Temporary

Online configuration loaded from file: [00_OpenIDSync_OnlineSyncConfig.json]  # white background, black text

	App registration name: xxx
	TenantId:
	ClientId:
	SpObjectId:
	ClientSecretEnvVar: OPENIDSYNC_CLIENT_SECRET not set.  # show with RED background/white text if not set
		OPENIDSYNC_CLIENT_SECRET set to XXX***XXX  # displaying the first and last 3 characters with *** in between

Password credentials file: .\log\xxx  # white background, black text

	When a new user is created in the destination directory, the password is not synchronized because the API does not provide the password hash.
	As a workaround, OpenIDSync creates a new password for users and stores it in this file. Back up the file in a secure location and use the remove-password option in the menu.

	Password credentials file not yet created.  # show with RED background/white text if the file is missing
	# or
	Number of users in file:	x
	Last update timestamp:		x
	Passwords removed:		NO


Logging configuration file: .\openidsync.log  # white background, black text
# Requirement blocks render only when at least one requirement is not yet satisfied. Completed dashboards suppress the entire requirement section.

Requirement 1 – Installed PowerShell Graph API modules:  # show with RED background/white text if not met; clear the highlight when fulfilled
	No modules installed yet.
	# or
	Installed modules:
	- Microsoft.Graph.Authentication
	- Microsoft.Graph.Users
	- Microsoft.Graph.Applications
	- Microsoft.Graph.Identity.DirectoryManagement
	- Microsoft.Graph.Groups

Requirement 2 – Create app registration for credential-less use:  # show with RED background/white text if not met; clear the highlight when fulfilled
	App registration name: <value>
	TenantId: <value or None>
	ClientId: <value or None>
	SpObjectId: <value or None>
	OPENIDSYNC_CLIENT_SECRET set to XXX***XXX  # red background if the secret environment variable is missing
	No app registration / service principal configured yet in Entra ID. Using delegated user mode (prompt the user to sign in to create an app registration for credential-less execution).
	# When verification succeeds, display:
	Verified application: <display name>
	Verified service principal: <display name>
	# Otherwise include warning/error text from the Graph lookup.

Requirement 3 – Required API permissions granted:  # show with RED background/white text if not met; clear the highlight when fulfilled
	User directory read: Retrieved at least one user from Microsoft Graph.
	Group directory read: Retrieved at least one group from Microsoft Graph.
	Group membership read: Retrieved at least one member from Microsoft Graph.
	# On failure, surface the descriptive error returned by Test-GraphReadOperations (e.g. Authorization_RequestDenied …).
	# When no eligible group is available the membership test reports “Skipped (no group available to test memberships).”

Requirement details are cached after a successful check and persisted to 00_OpenIDSync_OnlineSyncConfig.json.PermissionVerification. Re-running the dashboard reads from cache unless the user forces a refresh.

Menu:

	1) Fix Requirement 1 – Install PowerShell Graph API modules [-AutoInstallGraphModules]
	2) Fix Requirement 2 – Create app registration / service principal for credential-less use [-AutoCreateGraphApp]
	3) Fix Requirement 3 – Verify API permissions for the service principal
	   This step is not automated for security reasons. Grant permissions in the Azure portal manually and confirm the least-privileged credentials assigned to OpenIDSync support the synchronization job.
	   # display user instructions for completing this step.

	# Requirement-related menu items appear only while the associated requirement is unmet. Once all requirements pass, the requirement block is hidden and options 1–3 no longer display.

	4) Set user sync mode [S]KIP | [A]LL | [P]ROMPT  # display the configured value; settings persist in 00_OpenIDSync_Config.json
	5) Set group sync mode [S]KIP | [A]LL | [P]ROMPT
	6) Set group membership sync mode [S]KIP | [A]LL | [P]ROMPT

	7) Change source directory
		[M] Azure Entra ID (Microsoft)
		[A] AWS IAM Identity Center (Amazon)
		[G] GCP Cloud Identity (Google)
		[O] OCI IAM (Oracle)
		[W] Windows Active Directory (Microsoft)
		[K] Keycloak (Open Source)
		[C] CSV File (Microsoft 365 Admin Portal Export)
	Currently only "Azure Entra ID (Microsoft)" is supported.

	8) Change target directory
		[M] Azure Entra ID (Microsoft)
		[A] AWS IAM Identity Center (Amazon)
		[G] GCP Cloud Identity (Google)
		[O] OCI IAM (Oracle)
		[W] Windows Active Directory (Microsoft)
		[K] Keycloak (Open Source)
		[C] CSV File (Microsoft 365 Admin Portal Export)
	Currently only "[W] Windows Active Directory (Microsoft)" is supported.

	9) Start Synchronization

	10) Remove passwords from the password credentials file (after backing up initial/temporary passwords securely)
	    This file can be used to feed OpenGWTools and create a point-to-site road warrior VPN for users listed in it.

	11) View configuration details
	12) View requirement details (all passed)  # visible only after every requirement succeeds
	99) Exit

Select an option: 1